The bus picks them all .
So now the bus is travelling and reached the location 5 and thus passsengers of location 1 to 5 left the bus . so the capacity increased to 2 .
The bus continues to travel and reaches the location 7 and thus the second set of passengers from location 3 to location 7 left the bus . So the capacity got replenished to 5
​
Now Return true since all the trips can be sent to the destination.
​
If the capacity would have been 4 than it would have return false [Example 1 from description]
​
The reason why I used bus instead of car is because it stores passengers such that the ones who will get off soon should sit near the front. The bus receives information about its next trip to make, and if the next trip’s start location is beyond what the current passengers destinations, those current passengers get off . So you can see it's more like a bus in real life :)
```
​
**Intuition:-**
* In question they told us that the bus(or car) can go in one direction and cannot turn back. That's why we first sort the start location . After that as a passanger goes inside the vehicle the `capacity` should be reduced and in vice-versa case increase the capacity .
* Then if at any time `capacity` is less than the `number of passengers` than `return false`
​
**Algorithm:-**
1. First we need to sort the locations . So to do this we will be using a map named as `sortedmap` since map is sorted on keys and key is time instant .
2. After sorting the start location we traverse the whole `trips` array in which we initiate picking up and dropping of the passangers .
3. Now check if the `capacity` is less than 0, if true then return false .
​
**Code:-**
```
class Solution {
public:
bool carPooling(vector<vector<int>>& trips, int capacity) {
map<int, int> sortedmap;
for (int i = 0; i < trips.size(); ++i) {
sortedmap[trips[i][1]] += trips[i][0]; //filled seats increase when we pick up passengers
sortedmap[trips[i][2]] -= trips[i][0]; //filled seats decrease when we drop off the passengers
}
for (auto it = sortedmap.begin(); it != sortedmap.end();it++) {
capacity -= it->second;
if (capacity < 0)
return false ;
}
return true;
}
};
```