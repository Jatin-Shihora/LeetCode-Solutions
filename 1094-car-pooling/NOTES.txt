**Algorithm:-**
1. First we need to sort the locations . So to do this we will be using a map named as `sortedmap` since map is sorted on keys and key is time instant .
2. After sorting the start location we traverse the whole `trips` array in which we initiate picking up and dropping of the passangers .
3. Now check if the `capacity` is less than 0, if true then return false .
​
**Code:-**
```
class Solution {
public:
bool carPooling(vector<vector<int>>& trips, int capacity) {
map<int, int> sortedmap;
for (int i = 0; i < trips.size(); ++i) {
sortedmap[trips[i][1]] += trips[i][0]; // picking up the passengers resulting in occupany in filling of seats
sortedmap[trips[i][2]] -= trips[i][0]; //droping off the passengers resulting in reduction of filling of seats
}
for (auto it = sortedmap.begin(); it != sortedmap.end();it++) {
capacity -= it->second;
if (capacity < 0) return false;
}
return true;
}
};
```
​
**Optimization by exploiting the constraints :-**
* An optimization of the above algo can be that we Initialize a array named as `travelling` to size 1001 since maximum seats can be 1000
* Now we will keep track of number of passengers at any point using the `travelling` array.
* For any trip we will add the number of passengers at the starting location and remove that number of passengers at end location  since they will leave the vehicel at that location.
* Now if we think at certain loaction i there will be maximum number of passangers in the vehicle if that maximum passanger count is greater than the `capacity` then return false.
​
**Code:-**
```
​
```