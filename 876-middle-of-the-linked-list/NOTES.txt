while(temp && middle--)
temp=temp->next;
return temp;
}
};
```
**JAVA Brute Force Code:-**
```
class Solution {
public ListNode middleNode(ListNode head) {
ListNode temp = head;
int length=0;
//Traversing temp till the end of linked list to find length #O(n)
while(temp!=null){
temp = temp.next;
length++;
}
int middle = length/2;
temp=head;
//traversing temp node back to middle node #O(n/2)
while(middle != 0){
temp = temp.next;
middle--;
}
return temp;
}
}
```
**Time Complexity:** *`O(N)+O(N/2) = O(N)`*
**Space Complexity:** *`O(1)`*
​
**Two Pointer Algortihm or Tortoise and Hare Algorithm :**
1. Initialize the two pointers `slow` and `fast` at the head of linked list .
2. Now every time, slow goes 1 step while fast go 2 steps.
When fast pointer arrives at the end, slow pointer will arrive right in the middle of our linked list .
3. Now just return the value of slow pointer .
​
**C++ CODE:-**
```
ListNode* middleNode(ListNode* head) {
ListNode *slow = head, *fast = head;
while (fast && fast->next)
slow = slow->next, fast = fast->next->next;
return slow;
}
```