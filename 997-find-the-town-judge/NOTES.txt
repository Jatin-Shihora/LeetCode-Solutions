***
<br>
**C++ CODE:-**
```
class Solution {
public:
int findJudge(int N, vector<vector<int>>& trust) {
vector<int> Trusted(N + 1, 0);
for(auto person : trust){
Trusted[person[0]]--;
Trusted[person[1]]++;
}
for(int i = 1;i <= N;i++){
if(Trusted[i] == N - 1)
return i;
}
return -1;
}
};
```
***
**JAVA CODE:-**
```
class Solution {
public int findJudge(int N, int[][] trust) {
int[] Trusted = new int[N+1];
for(int[] person : trust){
Trusted[person[0]]--;
Trusted[person[1]]++;
}
for(int i = 1;i < Trusted.length;i++){
if(Trusted[i] == N-1) return i;
}
return -1;
}
}
```
***
**PYTHON CODE:-**
```
class Solution:
def findJudge(self, N: int, trust: List[List[int]]) -> int:
Trusted = [0] * (N+1)
for (a, b) in trust:
Trusted[a] -= 1
Trusted[b] += 1
for i in range(1, len(Trusted)):
if Trusted[i] == N-1:
return i
return -1
```